@page "/book-flight"
@using FlightSystem.Services
@using FlightSystem.UI
@using FlightSystem.Services.Models
@using Microsoft.AspNetCore.WebUtilities
@inject AirportsService airportsService
@inject FlightSearchService flightSearchService
@inject BookingService bookingService
@inject NavigationManager NavigationManager

<h3>BookFlight</h3>

<div class="row">
    <div class="col-md-5 col-sm-12">
        <AutoComplete @bind-Value="originSearchText"
                      TItem="Airport"
                      DataProvider="AirportsDataProvider"
                      PropertyName="Name"
                      Placeholder="Search an airport..."
                      OnChanged="(Airport airport) => OnOriginChanged(airport)"/>
    </div>
</div>

<div class="row">
    <div class="col-md-5 col-sm-12">
        <AutoComplete @bind-Value="destinationSearchText"
                      TItem="Airport"
                      DataProvider="AirportsDataProvider"
                      PropertyName="Name"
                      Placeholder="Search an airport..."
                      OnChanged="(Airport airport) => OnDestinationChanged(airport)" />
    </div>
</div>
<div class="mb-3">
    <DateInput TValue="DateOnly" @bind-Value="@travelDate" Placeholder="Enter Date" />
</div>
<Button Color="ButtonColor.Primary" 
    @onclick="() => SearchFlights()"
    Disabled="selectedOrigin is NoAirportSelected || selectedDestination is NoAirportSelected">Search Flights</Button>

@if (!loading)
{    
    <Grid 
          TItem="Flight"
          Class="table table-hover table-bordered table-striped"
          Data ="matchingFlights"
          AllowFiltering="true"
          Responsive="true"
          AllowRowClick="true"
          OnRowClick="OnRowClick">

        <GridColumns>
            <GridColumn TItem="Flight" HeaderText="Origin" SortKeySelector="item => item.Origin.ToString()">
                @context.Origin
            </GridColumn>
            <GridColumn TItem="Flight" HeaderText="Destination" SortKeySelector="item => item.Destination.ToString()">
                @context.Destination
            </GridColumn>
            <GridColumn TItem="Flight" HeaderText="Date" SortKeySelector="item => item.Date">
                @context.Date
            </GridColumn>
            <GridColumn TItem="Flight" HeaderText="Cost">
                @context.Price
            </GridColumn>
        </GridColumns>

    </Grid>
}
else
{
    <p>Loading...</p>
}

@code {
    private string originSearchText = "";
    private string destinationSearchText = "";
    private Airport selectedOrigin = new NoAirportSelected();
    private Airport selectedDestination = new NoAirportSelected();
    private DateOnly travelDate = DateOnly.FromDateTime(DateTime.Now.AddDays(7));
    private List<Flight> matchingFlights = new();
    private bool loading = false;

    private async Task<AutoCompleteDataProviderResult<Airport>> AirportsDataProvider(AutoCompleteDataProviderRequest<Airport> request)
    {
        var airports = await airportsService.SearchAirportsAsync(request.Filter.Value);

        return await Task.FromResult(new AutoCompleteDataProviderResult<Airport>
        {
            Data = airports,
            TotalCount = airports.Count
        });
    }

    private void OnOriginChanged(Airport airport)
    {
        if (airport is null)
            matchingFlights = new();
        selectedOrigin = airport ?? new NoAirportSelected();
        UpdateUriOnSelectionChange();
    }

    private void OnDestinationChanged(Airport airport)
    {
        if (airport is null)
            matchingFlights = new();
        selectedDestination = airport ?? new NoAirportSelected();
        UpdateUriOnSelectionChange();
    }

    private async Task SearchFlights()
    {
        loading = true;
        if (selectedOrigin is NoAirportSelected || selectedDestination is NoAirportSelected)
        {
            Console.WriteLine("No airport selected");
            return;
        }
        var flights = await flightSearchService.SearchFlightsAsync(selectedOrigin.Code, selectedDestination.Code, travelDate);
        matchingFlights = flights.Distinct().ToList();
        loading = false;
    }

    private async Task OnRowClick(GridRowEventArgs<Flight> args)
    {
        await bookingService.BookFlight(args.Item);
        NavigationManager.NavigateTo("bookings");
    }

    private void UpdateUriOnSelectionChange()
    {
        var query = new Dictionary<string, string> { 
            { "origin", selectedOrigin.Code.ToString() },
            { "destination", selectedDestination.Code.ToString() }
        };
        NavigationManager.NavigateTo(
            QueryHelpers.AddQueryString(NavigationManager.Uri.Split('?')[0], query));
    }

    protected record NoAirportSelected : Airport {
        public NoAirportSelected() : base(IataCode.Empty(), "")
        {
            
        }
    }
}
