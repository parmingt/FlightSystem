@page "/book-flight"
@using FlightSystem.UI
@inject AirportsService airportsService
@inject FlightSearchService flightSearchService

<h3>BookFlight</h3>

<div class="row">
    <div class="col-md-5 col-sm-12">
        <AutoComplete @bind-Value="originSearchText"
                      TItem="Airport"
                      DataProvider="AirportsDataProvider"
                      PropertyName="Name"
                      Placeholder="Search an airport..."
                      OnChanged="(Airport airport) => OnOriginChanged(airport)"/>
    </div>
</div>

<div class="row">
    <div class="col-md-5 col-sm-12">
        <AutoComplete @bind-Value="destinationSearchText"
                      TItem="Airport"
                      DataProvider="AirportsDataProvider"
                      PropertyName="Name"
                      Placeholder="Search an airport..."
                      OnChanged="(Airport airport) => OnDestinationChanged(airport)" />
    </div>
</div>
<div class="mb-3">
    <DateInput TValue="DateOnly" @bind-Value="@travelDate" Placeholder="Enter Date" />
</div>
<Button Color="ButtonColor.Primary" 
    @onclick="() => SearchFlights()"
    Disabled="selectedOrigin is NoAirportSelected || selectedDestination is NoAirportSelected">Search Flights</Button>

<Grid 
      TItem="Flight"
      Class="table table-hover table-bordered table-striped"
      Data ="matchingFlights"
      AllowFiltering="true"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="Flight" HeaderText="Origin">
            @context.Origin.Name
        </GridColumn>
        <GridColumn TItem="Flight" HeaderText="Destination">
            @context.Destination.Name
        </GridColumn>
        <GridColumn TItem="Flight" HeaderText="Date">
            @context.Date
        </GridColumn>
    </GridColumns>

</Grid>

@code {
    private string originSearchText = "";
    private string destinationSearchText = "";
    private Airport selectedOrigin = new NoAirportSelected();
    private Airport selectedDestination = new NoAirportSelected();
    private DateOnly travelDate = DateOnly.FromDateTime(DateTime.Now);
    private List<Flight> matchingFlights = new();

    private async Task<AutoCompleteDataProviderResult<Airport>> AirportsDataProvider(AutoCompleteDataProviderRequest<Airport> request)
    {
        var airports = await airportsService.SearchAirportsAsync(request.Filter.Value);

        return await Task.FromResult(new AutoCompleteDataProviderResult<Airport>
        {
            Data = airports,
            TotalCount = airports.Count
        });
    }

    private void OnOriginChanged(Airport airport)
    {
        if (airport is null)
            matchingFlights = new();
        selectedOrigin = airport ?? new NoAirportSelected();
    }

    private void OnDestinationChanged(Airport airport)
    {
        if (airport is null)
            matchingFlights = new();
        selectedDestination = airport ?? new NoAirportSelected();
    }

    private async Task SearchFlights()
    {
        if (selectedOrigin is NoAirportSelected || selectedDestination is NoAirportSelected)
        {
            Console.WriteLine("No airport selected");
            return;
        }
        var flights = await flightSearchService.SearchFlightsAsync(selectedOrigin, selectedDestination, travelDate);
        matchingFlights = flights;
    }

    protected record NoAirportSelected : Airport {
        public NoAirportSelected() : base("", "")
        {
            
        }
    }
}
